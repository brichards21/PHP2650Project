mutate(status = as.factor(status))
pbc_use <- oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) %>%
mutate(status = as.integer(as.character(status)))
pbc_use <- oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) #%>%
pbc_use
pbc_use <- imbalance::oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) #%>%
pbc_use
pbc_use$time <- as.numeric(pbc_use$time)
pbc_use <- imbalance::oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) #%>%
pbc_use
pbc_use$chol <- as.numeric(pbc_use$chol)
pbc_use <- imbalance::oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) #%>%
pbc_use
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
library(survminer)
library(party)
library(pec)
library(caret)
library(Metrics)
library(partykit)
library(riskRegression)
library(ggfortify)
library(ranger)
library(imbalance)
# <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large S(t) = P(T > t)"></div>
## <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large h(t) = lim_{\delta t \rightarrow 0} \frac{Pr(t \le T \le t + \delta t | T> t)}{\delta t}"></div>
pbc_use <- pbc %>%
mutate(status = as.integer(ifelse(status == 2, 1, 0))) %>%
select(-id)
pbc_use$trt <- as.factor(pbc_use$trt)
pbc_use$ascites <- as.factor(pbc_use$ascites)
pbc_use$hepato <- as.factor(pbc_use$hepato)
pbc_use$spiders <- as.factor(pbc_use$spiders)
pbc_use$copper <- as.numeric(pbc_use$copper)
pbc_use$stage <- as.numeric(pbc_use$stage)
pbc_use$platelet <- as.numeric(pbc_use$platelet)
pbc_use$trig <- as.numeric(pbc_use$trig)
pbc_use$time <- as.numeric(pbc_use$time)
pbc_use$chol <- as.numeric(pbc_use$chol)
pbc.cox2 <- coxph(Surv(time, status) ~ . - alk.phos, data = pbc_use)
pbc.cox3 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato, data = pbc_use)
pbc.cox4 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites, data = pbc_use)
pbc.cox5 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders, data = pbc_use)
pbc.cox6 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt, data = pbc_use)
pbc.cox7 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig, data = pbc_use)
pbc.cox8 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet, data = pbc_use)
pbc.cox9 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex, data = pbc_use)
pbc.cox10 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex -
chol, data = pbc_use)
pbc_use <- pbc_use %>%
select(-c(alk.phos, hepato, ascites, spiders,
trt, trig, platelet, sex, chol))
# test two-way interactions
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
pbc_use <- pbc_use %>%
filter(time %in% aareg_pbc$times)
pbc_use <- imbalance::oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) #%>%
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
library(survminer)
library(party)
library(pec)
library(caret)
library(Metrics)
library(partykit)
library(riskRegression)
library(ggfortify)
library(ranger)
library(imbalance)
# <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large S(t) = P(T > t)"></div>
## <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large h(t) = lim_{\delta t \rightarrow 0} \frac{Pr(t \le T \le t + \delta t | T> t)}{\delta t}"></div>
pbc_use <- pbc %>%
mutate(status = as.integer(ifelse(status == 2, 1, 0))) %>%
select(-id)
pbc_use$trt <- as.factor(pbc_use$trt)
pbc_use$ascites <- as.factor(pbc_use$ascites)
pbc_use$hepato <- as.factor(pbc_use$hepato)
pbc_use$spiders <- as.factor(pbc_use$spiders)
pbc_use$copper <- as.numeric(pbc_use$copper)
pbc_use$stage <- as.numeric(pbc_use$stage)
pbc_use$platelet <- as.numeric(pbc_use$platelet)
pbc_use$trig <- as.numeric(pbc_use$trig)
pbc_use$time <- as.numeric(pbc_use$time)
pbc_use$chol <- as.numeric(pbc_use$chol)
pbc.cox2 <- coxph(Surv(time, status) ~ . - alk.phos, data = pbc_use)
pbc.cox3 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato, data = pbc_use)
pbc.cox4 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites, data = pbc_use)
pbc.cox5 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders, data = pbc_use)
pbc.cox6 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt, data = pbc_use)
pbc.cox7 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig, data = pbc_use)
pbc.cox8 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet, data = pbc_use)
pbc.cox9 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex, data = pbc_use)
pbc.cox10 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex -
chol, data = pbc_use)
pbc_use <- pbc_use %>%
select(-c(alk.phos, hepato, ascites, spiders,
trt, trig, platelet, sex, chol))
# test two-way interactions
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
aareg_pbc <- aareg(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
pbc_use <- pbc_use %>%
filter(time %in% aareg_pbc$times)
pbc_use <- imbalance::oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) %>%
mutate(status = as.integer(as.character(status)))
pbc_use
table(pbc_use$status)
pbc_use
pbc_cox <- coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
test.ph <- cox.zph(pbc_cox)
test.ph
schoenplot1 <- ggcoxzph(test.ph)[1]
schoenplot2 <- ggcoxzph(test.ph)[3]
schoenplot3 <- ggcoxzph(test.ph)[7]
schoenplot4 <- ggcoxzph(test.ph)[8]
schoenplot5 <- ggcoxzph(test.ph)[11]
schoenplot1$`1`
schoenplot2$`3`
schoenplot3$`7`
schoenplot4$`8`
schoenplot5$`11`
set.seed(1)
# We can find the optimal mtry and nodesize using OOB
tuning <- tune(formula = Surv(time, status) ~ age + edema + bili + albumin + copper +
ast + protime + stage + age:edema + age:copper + bili:ast,
data = pbc_use,
mtryStart = ncol(pbc_use) / 2,
nodesizeTry = c(c(1:9), seq(10, 100, by = 5)),
ntreeTry =500,
doBest = TRUE)
res <- as.data.frame(tuning$results)
# print optimal nodesize and mtry
tuning$optimal # wtf lmao
node_size <- c(seq(5, 100, by = 5))
ggplot(res) +
geom_line(aes(x = nodesize, y = err, colour = factor(mtry))) +
labs(col = "mtry")
set.seed(1)
# random forest
pbc_rf <- rfsrc(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
mtry = 1,
nodesize = 15,
data = pbc_use)
set.seed(1)
# run conditional inference forest
pbc_cif <- pecCforest(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
set.seed(1)
rand_inds_pbc_event <- sample(nrow(pbc_use[pbc_use$status == 1,]), 2)
rand_inds_pbc_cens <- sample(nrow(pbc_use[pbc_use$status == 0,]), 2)
rand_data_pbc <- rbind(pbc_use[pbc_use$status == 1,][rand_inds_pbc_event, ],
pbc_use[pbc_use$status == 0,][rand_inds_pbc_cens, ])
cif.predict3_pbc <- treeresponse(pbc_cif$forest,
newdata = rand_data_pbc)
set.seed(1)
# Obtain predicted values for RSF
pbc_pred <- predict(pbc_rf, rand_data_pbc)
# obtain time values
Time <- pbc_rf$time.interest
cif.predict3_pbc$`69`
cif.predict3_pbc$`40`
cif.predict3_pbc$`14`
cif.predict3_pbc$`153`
##########
# Finding the Median Survival Probability
# obtain the index for which the survival probability = 0.5
t_id1 <- which.min(abs(round(pbc_pred$survival[1,], 2) -.5))
t_id2 <- which.min(abs(round(pbc_pred$survival[2,], 2) - .5))
t_id3 <- which.min(abs(round(pbc_pred$survival[3,], 2) - .5))
t_id4 <- which.min(abs(round(pbc_pred$survival[4,], 2) - .5))
# obtain the times at which survival probability = 0.5 occurs
Time[t_id1] # 2105
Time[t_id2] # 1487
Time[t_id3] # 3584
Time[t_id4] # 3584
rand_data_pbc
cif.predict3_pbc$`69`
cif.predict3_pbc$`40`
cif.predict3_pbc$`14`
cif.predict3_pbc$`153`
cif.predict3_pbc$`69`
cif.predict3_pbc$`40`
cif.predict3_pbc$`14`
cif.predict3_pbc$`153`
##########
# Finding the Median Survival Probability
# obtain the index for which the survival probability = 0.5
t_id1 <- which.min(abs(round(pbc_pred$survival[1,], 2) -.5))
t_id2 <- which.min(abs(round(pbc_pred$survival[2,], 2) - .5))
t_id3 <- which.min(abs(round(pbc_pred$survival[3,], 2) - .5))
t_id4 <- which.min(abs(round(pbc_pred$survival[4,], 2) - .5))
# obtain the times at which survival probability = 0.5 occurs
Time[t_id1] # 1413
Time[t_id2] # 1487
Time[t_id3] # 3584
Time[t_id4] # 3584
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
library(survminer)
library(party)
library(pec)
library(caret)
library(Metrics)
library(partykit)
library(riskRegression)
library(ggfortify)
library(ranger)
library(imbalance)
# <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large S(t) = P(T > t)"></div>
## <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large h(t) = lim_{\delta t \rightarrow 0} \frac{Pr(t \le T \le t + \delta t | T> t)}{\delta t}"></div>
pbc_use <- pbc %>%
mutate(status = as.integer(ifelse(status == 2, 1, 0))) %>%
select(-id)
pbc_use$trt <- as.factor(pbc_use$trt)
pbc_use$ascites <- as.factor(pbc_use$ascites)
pbc_use$hepato <- as.factor(pbc_use$hepato)
pbc_use$spiders <- as.factor(pbc_use$spiders)
pbc_use$copper <- as.numeric(pbc_use$copper)
pbc_use$stage <- as.numeric(pbc_use$stage)
pbc_use$platelet <- as.numeric(pbc_use$platelet)
pbc_use$trig <- as.numeric(pbc_use$trig)
pbc_use$time <- as.numeric(pbc_use$time)
pbc_use$chol <- as.numeric(pbc_use$chol)
pbc.cox2 <- coxph(Surv(time, status) ~ . - alk.phos, data = pbc_use)
pbc.cox3 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato, data = pbc_use)
pbc.cox4 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites, data = pbc_use)
pbc.cox5 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders, data = pbc_use)
pbc.cox6 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt, data = pbc_use)
pbc.cox7 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig, data = pbc_use)
pbc.cox8 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet, data = pbc_use)
pbc.cox9 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex, data = pbc_use)
pbc.cox10 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex -
chol, data = pbc_use)
pbc_use <- pbc_use %>%
select(-c(alk.phos, hepato, ascites, spiders,
trt, trig, platelet, sex, chol))
# test two-way interactions
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
aareg_pbc <- aareg(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
pbc_use <- pbc_use %>%
filter(time %in% aareg_pbc$times)
pbc_use <- imbalance::oversample(na.omit(pbc_use),
classAttr = "status",
ratio = 1) %>%
mutate(status = as.integer(as.character(status)))
pbc_cox <- coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
test.ph <- cox.zph(pbc_cox)
test.ph
schoenplot1 <- ggcoxzph(test.ph)[1]
schoenplot2 <- ggcoxzph(test.ph)[3]
schoenplot3 <- ggcoxzph(test.ph)[7]
schoenplot4 <- ggcoxzph(test.ph)[8]
schoenplot5 <- ggcoxzph(test.ph)[11]
schoenplot1$`1`
schoenplot2$`3`
schoenplot3$`7`
schoenplot4$`8`
schoenplot5$`11`
set.seed(1)
# We can find the optimal mtry and nodesize using OOB
tuning <- tune(formula = Surv(time, status) ~ age + edema + bili + albumin + copper +
ast + protime + stage + age:edema + age:copper + bili:ast,
data = pbc_use,
mtryStart = ncol(pbc_use) / 2,
nodesizeTry = c(c(1:9), seq(10, 100, by = 5)),
ntreeTry =500,
doBest = TRUE)
res <- as.data.frame(tuning$results)
# print optimal nodesize and mtry
tuning$optimal # wtf lmao
node_size <- c(seq(5, 100, by = 5))
ggplot(res) +
geom_line(aes(x = nodesize, y = err, colour = factor(mtry))) +
labs(col = "mtry")
set.seed(1)
# random forest
pbc_rf <- rfsrc(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
mtry = 1,
nodesize = 15,
data = pbc_use)
set.seed(1)
# run conditional inference forest
pbc_cif <- pecCforest(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
set.seed(1)
rand_inds_pbc_event <- sample(nrow(pbc_use[pbc_use$status == 1,]), 2)
rand_inds_pbc_cens <- sample(nrow(pbc_use[pbc_use$status == 0,]), 2)
rand_data_pbc <- rbind(pbc_use[pbc_use$status == 1,][rand_inds_pbc_event, ],
pbc_use[pbc_use$status == 0,][rand_inds_pbc_cens, ])
cif.predict3_pbc <- treeresponse(pbc_cif$forest,
newdata = rand_data_pbc)
set.seed(1)
# Obtain predicted values for RSF
pbc_pred <- predict(pbc_rf, rand_data_pbc)
# obtain time values
Time <- pbc_rf$time.interest
rand_data_pbc
fit_comp_pbc <- pec(list("cforest" = pbc_cif, "rsf" = pbc_rf),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
B = 50
)
fit_comp_pbc
plot(fit_comp_pbc, predErr = "BootCvErr")
summary(fit_comp_pbc)
fit_comp_pbc <- pec(list("cforest" = pbc_cif, "rsf" = pbc_rf),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
B = 50,
times = c(0, 611, 1152, 2090)
)
summary(fit_comp_pbc)
fit_comp_pbc
fit_comp_pbc <- pec(list("cforest" = pbc_cif, "rsf" = pbc_rf),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
B = 50,
exact = TRUE
)
fit_comp_pbc
summary(fit_comp_pbc)
plot(fit_comp_pbc, predErr = "BootCvErr")
print(fit_comp_pbc)
crps(fit_comp_pbc)
fit_comp_pbc
crps(fit_comp_pbc)
max(pbc_use$time)
crps(fit_comp_pbc)
summary(fit_comp_pbc)
pbc_use$time
order(pbc_use$time)
sort(pbc_use$time)
sort(pbc_use$time, decreasing = T)
fit_comp_pbc <- pec(list("cforest" = pbc_cif, "rsf" = pbc_rf),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
maxtime = 3574,
B = 50,
exact = TRUE
)
crps(fit_comp_pbc)
summary(fit_comp_pbc)
sort(pbc_use$time, decreasing = T)
fit_comp_pbc <- pec(list("cforest" = pbc_cif, "rsf" = pbc_rf),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
maxtime = 3445,
B = 50,
exact = TRUE
)
crps(fit_comp_pbc)
fit_comp_pbc
crps(fit_comp_pbc)
plot(fit_comp_pbc, predErr = "BootCvErr")
crps(fit_comp_pbc)
fit_comp_pbc <- pec(list("rsf" = pbc_rf, "cforest" = pbc_cif),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
maxtime = 3445,
B = 50,
exact = TRUE
)
crps(fit_comp_pbc)
set.seed(1)
fit_comp_pbc <- pec(list("rsf" = pbc_rf, "cforest" = pbc_cif),
data = pbc_use,
formula = Surv(time, status) ~ age + edema + bili + albumin + copper + ast + protime + stage + age:edema + age:copper + bili:ast,
splitMethod = "BootCv",
reference = FALSE,
maxtime = 3445,
B = 50,
exact = TRUE
)
crps(fit_comp_pbc)
plot(fit_comp_pbc, predErr = "BootCvErr")
turnover <- read_csv("data/turnover.csv")
