bili:albumin - edema:bili -
age:protime - edema:copper, data = pbc_use)
pbc.int18
pbc.int18
pbc.int19 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper, data = pbc_use)
pbc.int19 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper, data = pbc_use)
pbc.int19
pbc.int20
pbc.int20 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper - protime:stage, data = pbc_use)
pbc.int20
pbc.int21 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper - protime:stage -
age:ast, data = pbc_use)
pbc.int21
pbc.int22 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper - protime:stage -
age:ast - albumin:copper, data = pbc_use)
pbc.int22
pbc.int23 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper - protime:stage -
age:ast - albumin:copper -
age:bili, data = pbc_use)
pbc.int23
pbc.int24 <- coxph(Surv(time, status) ~ (.)^2 - bili:protime -
ast:stage - edema:albumin -
edema:protime - copper:ast -
albumin:stage - edema:stage -
albumin:ast - copper:protime -
age:stage - edema:ast -
age:albumin - copper:stage -
bili:albumin - edema:bili -
age:protime - edema:copper -
bili:copper - protime:stage -
age:ast - albumin:copper -
age:bili - ast:protime, data = pbc_use)
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
pbc_use <- pbc %>%
mutate(status = as.integer(ifelse(status == 2, 1, 0))) %>%
select(-id)
pbc_use$trt <- as.factor(pbc_use$trt)
pbc_use$ascites <- as.factor(pbc_use$ascites)
pbc_use$hepato <- as.factor(pbc_use$hepato)
pbc_use$spiders <- as.factor(pbc_use$spiders)
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
pbc_use <- pbc %>%
mutate(status = as.integer(ifelse(status == 2, 1, 0))) %>%
select(-id)
pbc_use$trt <- as.factor(pbc_use$trt)
pbc_use$ascites <- as.factor(pbc_use$ascites)
pbc_use$hepato <- as.factor(pbc_use$hepato)
pbc_use$spiders <- as.factor(pbc_use$spiders)
pbc.cox2 <- coxph(Surv(time, status) ~ . - alk.phos, data = pbc_use)
pbc.cox3 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato, data = pbc_use)
pbc.cox4 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites, data = pbc_use)
pbc.cox5 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders, data = pbc_use)
pbc.cox6 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt, data = pbc_use)
pbc.cox7 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig, data = pbc_use)
pbc.cox8 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet, data = pbc_use)
pbc.cox9 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex, data = pbc_use)
pbc.cox10 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex -
chol, data = pbc_use)
pbc_use <- pbc_use %>%
select(-c(alk.phos, hepato, ascites, spiders,
trt, trig, platelet, sex, chol))
# test two-way interactions
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
coxph(Surv(time, status) ~ trt, data =  pbc)
pbc_cox <- coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast + bili:stage + albumin:protime + ast:protime,
data = pbc_use)
pbc_cox
coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast + bili:stage + albumin:protime,
data = pbc_use)
coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast + albumin:protime,
data = pbc_use)
coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
pbc_cox2 <- coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
BIC(pbc_cox)
BIC(pbc_cox2)
BIC(pbc_cox)
BIC(pbc_cox2)
AIC(pbc_cox)
AIC(pbc_cox2)
BIC(pbc_cox)
BIC(pbc_cox2)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
turnover <- read_csv("data/turnover.csv")
library(partykit)
install.packages("partykit")
library(partykit)
# run conditional inference forest
param_test <- function(mtry_value) {
turn_cif <- partykit::cforest(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  train_turn,
mtry= mtry_value)
pred_train_turn <- cbind(train_turn, pred_time = predict(turn_cif, train_turn[, -c(1:2)], OOB = TRUE)) %>%
filter(pred_time != Inf) %>%
select(stag, event, pred_time)
mean_absolute_error <- mae(pred_train_turn$stag, pred_train_turn$pred_time)
return(mean_absolute_error)
}
set.seed(1)
maes_turn <- unlist(lapply(2:8, param_test))
turnover <- read_csv("data/turnover.csv")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
library(survminer)
library(party)
library(pec)
library(caret)
library(Metrics)
library(partykit)
turnover <- read_csv("data/turnover.csv")
#ncol(turnover)
#head(turnover)
#table(turnover$way)
#colnames(turnover)
turn_use <- turnover
turn_use$event = as.integer(turn_use$event)
turn_use$gender = as.factor(turn_use$gender)
turn_use$industry = as.factor(turn_use$industry)
turn_use$profession = as.factor(turn_use$profession)
turn_use$traffic = as.factor(turn_use$traffic)
turn_use$coach = as.factor(turn_use$coach)
turn_use$head_gender = as.factor(turn_use$head_gender)
turn_use$greywage = as.factor(turn_use$greywage)
turn_use$way = as.factor(turn_use$way)
turn_use <- turn_use %>%
select(c(stag, event, age, industry, profession, traffic, greywage, way, selfcontrol, anxiety))
turn_cox <- coxph(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  turn_use)
set.seed(1)
train_ind_turn <- sample(1:nrow(turn_use), nrow(turn_use)*0.75)
train_turn <- turn_use[train_ind_turn,]
test_turn <- turn_use[-train_ind_turn,]
# run conditional inference forest
param_test <- function(mtry_value) {
turn_cif <- partykit::cforest(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  train_turn,
mtry= mtry_value)
pred_train_turn <- cbind(train_turn, pred_time = predict(turn_cif, train_turn[, -c(1:2)], OOB = TRUE)) %>%
filter(pred_time != Inf) %>%
select(stag, event, pred_time)
mean_absolute_error <- mae(pred_train_turn$stag, pred_train_turn$pred_time)
return(mean_absolute_error)
}
set.seed(1)
maes_turn <- unlist(lapply(2:8, param_test))
maes_turn
predict(turn_cif)
maes_turn
turn_cif <- cforest(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = train_pbc,
# cforest_unbiased = unbiased variable importance estimates
#control = cforest_unbiased(ntree = 500, mtry= 2)
mtry = 2
)
turn_cif <- partykit::cforest(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = train_pbc,
# cforest_unbiased = unbiased variable importance estimates
#control = cforest_unbiased(ntree = 500, mtry= 2)
mtry = 2
)
turn_cif <- partykit::cforest(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  train_turn,
# cforest_unbiased = unbiased variable importance estimates
#control = cforest_unbiased(ntree = 500, mtry= 2)
mtry = 2
)
predict(turn_cif)
predict(turn_cif, type = "response")
train_turn
predict(turn_cif, type = "response")
train_turn %>%
select(stag)
cbind(train_turn %>%
select(stag),
predict(turn_cif, type = "response"))
cbind(train_turn %>%
select(stag),
predict(turn_cif, type = "response"),
predict(turn_cif)) # the median survival time for a censored response is returned
cbind(train_turn %>%
select(stag, event),
predict(turn_cif, type = "response")) # the median survival time for a censored response is returned
survfit(turn_cif)
pec(turn_cif)
pec(turn_cif,
formula = Surv(stag, event) ~ age)
pec(turn_cif,
formula = Surv(stag, event) ~ age,
data = train_turn)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
library(survminer)
library(party)
library(pec)
library(caret)
library(Metrics)
library(partykit)
# <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large S(t) = P(T > t)"></div>
## <div align="center"><img src="https://render.githubusercontent.com/render/math?math=\Large h(t) = lim_{\delta t \rightarrow 0} \frac{Pr(t \le T \le t + \delta t | T> t)}{\delta t}"></div>
pbc_use <- pbc %>%
mutate(status = as.integer(ifelse(status == 2, 1, 0))) %>%
select(-id)
pbc_use$trt <- as.factor(pbc_use$trt)
pbc_use$ascites <- as.factor(pbc_use$ascites)
pbc_use$hepato <- as.factor(pbc_use$hepato)
pbc_use$spiders <- as.factor(pbc_use$spiders)
pbc.cox2 <- coxph(Surv(time, status) ~ . - alk.phos, data = pbc_use)
pbc.cox3 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato, data = pbc_use)
pbc.cox4 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites, data = pbc_use)
pbc.cox5 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders, data = pbc_use)
pbc.cox6 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt, data = pbc_use)
pbc.cox7 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig, data = pbc_use)
pbc.cox8 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet, data = pbc_use)
pbc.cox9 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex, data = pbc_use)
pbc.cox10 <- coxph(Surv(time, status) ~ . - alk.phos -
hepato - ascites - spiders -
trt - trig - platelet - sex -
chol, data = pbc_use)
pbc_use <- pbc_use %>%
select(-c(alk.phos, hepato, ascites, spiders,
trt, trig, platelet, sex, chol))
# test two-way interactions
pbc.full <- coxph(Surv(time, status) ~ (.)^2, data =  pbc_use)
step(pbc.full, direction = "backward")
pbc_cox <- coxph(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = pbc_use)
test.ph <- cox.zph(pbc_cox)
test.ph
schoenplot1 <- ggcoxzph(test.ph)[3]
schoenplot2 <- ggcoxzph(test.ph)[7]
schoenplot3 <- ggcoxzph(test.ph)[11]
schoenplot1$`3`
schoenplot2$`7`
schoenplot3$`11`
set.seed(1)
train_ind_pbc <- sample(1:nrow(pbc_use), nrow(pbc_use)*0.75)
train_pbc <- pbc_use[train_ind_pbc,]
test_pbc <- pbc_use[-train_ind_pbc,]
pbc_rf <- rfsrc(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast, data = train_pbc)
# run conditional inference forest
# note to self - should at least tune mtry 3-8
pbc_cif <- cforest(Surv(time, status) ~ age + edema + bili + albumin +
copper + ast + protime + stage + age:edema + age:copper +
bili:ast,
data = train_pbc,
# cforest_unbiased = unbiased variable importance estiamtes
control = cforest_unbiased(ntree = 500, mtry=5))
# mean absolute error on training set (survival times)
pred_train <- cbind(train_pbc, pred_time = predict(pbc_cif, train_pbc[, -c(1:2)], OOB = TRUE)) %>%
filter(pred_time != Inf) %>%
select(time, status, pred_time)
mae(pred_train$time, pred_train$pred_time)
pred_test <- cbind(test_pbc, pred_time =
predict(pbc_cif, test_pbc[, -c(1:2)], OOB = TRUE)) %>%
filter(pred_time != Inf) %>%
select(time, status, pred_time)
pec(turn_cif,
formula = Surv(stag, event) ~ age,
data = train_turn)
turn_cif <- party::cforest(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  train_turn,
# cforest_unbiased = unbiased variable importance estimates
#control = cforest_unbiased(ntree = 500, mtry= 2)
mtry = 2
)
turn_cif <- party::cforest(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  train_turn,
# cforest_unbiased = unbiased variable importance estimates
control = cforest_unbiased(ntree = 500, mtry= 2)
)
pec(turn_cif,
formula = Surv(stag, event) ~ age,
data = train_turn)
library(iterativeBMA)
install.packages("iterativeBMA")
library(iterativeBMA)
predict(turn_cif, type = "prob")
predict(turn_cif, test_turn)
predict(turn_cif, test_turn[, -c(1:2)])
predict(turn_cif, newdata = test_turn[, -c(1:2)])
# run conditional inference forest
param_test <- function(mtry_value) {
turn_cif <- party::cforest(Surv(stag, event) ~ age + industry + profession + traffic +
greywage + way + selfcontrol + anxiety + age:way + way:selfcontrol,
data =  train_turn,
# cforest_unbiased = unbiased variable importance estimates
control = cforest_unbiased(ntree = 500, mtry= mtry_value))
pred_train_turn <- cbind(train_turn, pred_time =predict(turn_cif)) %>%
select(stag, event, pred_time)
pred_test_turn <- cbind(test_turn, pred_time =predict(turn_cif, newdata = test_turn[, -c(1:2)])) %>%
select(stag, event, pred_time)
mae_train <- mae(pred_train_turn$stag, pred_train_turn$pred_time)
mae_test <- mae(pred_test_turn$stag, pred_test_turn$pred_time)
return(c(mae_train, mae_test))
}
set.seed(1)
maes_turn <- lapply(2:8, param_test)
maes_turn
install.packages("riskRegression")
library(riskRegression)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
library(survminer)
library(party)
library(pec)
library(caret)
library(Metrics)
library(partykit)
library(riskRegression)
test_turn2$T <- Surv(time = test_turn$stag, event = test_turn$event)
# the median survival time for a censored response is returned
test_turn2 <- test_turn
test_turn2$T <- Surv(time = test_turn$stag, event = test_turn$event)
test_turn2
cbind(test_turn2, predict(turn_cif, newdata = test_turn[, -c(1:2)])
cbind(test_turn2, predict(turn_cif, newdata = test_turn[, -c(1:2)]))
predict(turn_cif, newdata = test_turn[, -c(1:2)])
cbind(test_turn2, predict(turn_cif, newdata = test_turn[, -c(1:2)]))
cbind(test_turn2, p = predict(turn_cif, newdata = test_turn[, -c(1:2)]))
cbind(test_turn2, p = predict(turn_cif, newdata = test_turn[, -c(1:2)])) %>%
select(stag, event, p)
cbind(test_turn2, p = predict(turn_cif, newdata = test_turn[, -c(1:2)])) %>%
select(stag, event, T, p)
Score(list("Cox(blah)" = turn_cox),
forumula = Surv(stag, event) ~ 1,
data = train_turn)
Score(list("Cox(blah)" = turn_cox),
formula = Surv(stag, event) ~ 1,
data = train_turn)
Score(turn_cox,
formula = Surv(stag, event) ~ 1,
data = train_turn)
riskRegression::Score(turn_cox,
formula = Surv(stag, event) ~ 1,
data = train_turn)
riskRegression::Score(turn_cox,
formula = Surv(stag, event) ~ 1,
data = train_turn,
summary = "ibs",
times = sort(unique(test_turn$stag)))
treeresponse(turn_cif)
