q()
updateR()
require(installr)
updateR()
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = FALSE)
library(tidyverse)
library(lubridate)
library(ical)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
#km <- survfit(T ~ group, data = hepatitis)
#km <- survfit(T ~ group, data = hepatitis)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = FALSE)
library(tidyverse)
library(lubridate)
library(ical)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
#pbc_rf <- rfsrc(Surv(years, status) ~ ., data = pbc,
#nsplit = 10,
#na.action = "na.impute")
turnover <- read_csv("GitHub/PHP2650Project/data/turnover.csv")
length(ncol(turnover))
#km <- survfit(T ~ group, data = hepatitis)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = FALSE)
library(tidyverse)
library(lubridate)
library(ical)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
turnover <- read_csv("GitHub/PHP2650Project/data/turnover.csv")
length(ncol(turnover))
turnover <- read_csv("GitHub/PHP2650Project/data/turnover.csv")
ncol(turnover)
head(turnover)
table(turnover$traffic)
table(turnover$coach)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = FALSE)
library(tidyverse)
library(lubridate)
library(ical)
library(kableExtra)
library(janitor)
library(reshape2)
library(data.table)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(gifski)
library(survival)
library(randomForestSRC)
library(readr)
library(tidyverse)
library(tidyr)
colnames(turnover)
table(turnover$way)
colnames(turnover)
#ncol(turnover)
head(turnover)
load("C:/Users/brean/Downloads/36498-5002-Data.rda")
load("C:/Users/brean/Downloads/36498-5001-Data.rda")
knitr::opts_chunk$set(echo = TRUE)
adult5 <- da36498.5001
youth5 <- da36498.5002
adult5 <- da36498.5001
youth5 <- da36498.5002
head(adult5)
load("C:/Users/brean/Downloads/msm_data.rda")
# Source dependent scripts ------------------------------------------------
library(survey)
source("path_backend_wide.R")
require(data.table)
read.table(file = '37786-0001-Data.tsv', sep = '\t', header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(janitor)
library(tidyr)
library(tidyverse)
library(plyr)
new_data <- read_csv("KyleTier2_3subs.xlsx")
previous_data <- read_csv("subscriber-list_16.csv")
new_data <- read_csv("KyleTier2_3subs.xlsx")
new_data
new_data <- read_excel("KyleTier2_3subs.xlsx")
library(readxl)
previous_data <- read_csv("subscriber-list_16.csv")
new_data <- read_excel("KyleTier2_3subs.xlsx")
new_data
update_data <- function(old, new) {
old <- old %>%
clean_names()
new <- new %>%
clean_names()
new$updated_sub_date <- new$subscribe_date
for (i in 1:nrow(new)) {
if (
nrow(merge(new[new$username == new$username[i] & new$current_tier == new$current_tier[i], ][, c('username', 'current_tier')], old[, c('username', 'current_tier')])) > 0 &&
(old[old$username == new$username[i] & old$current_tier == new[new$username == new$username[i], ]$current_tier, ]$sub_type != "gift") &&
(new$subscribe_date[i] != old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date)) {
new$updated_sub_date[i] <- old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date
}
}
new <- new %>%
arrange(updated_sub_date)
return(new)
}
updated <- update_data(previous_data, new_data)
# check for lapsed subs that resubbed
updated %>%
filter(subscribe_date != updated_sub_date)
all(updated$subscribe_date == updated$updated_sub_date)
new_data
previous_data
new_data
as.POSIXct(new_data$`Subscribe Date`,tz=Sys.timezone())
new_data
as.POSIXct(new_data$`Subscribe Date`, format="%m/%d/%Y %H:%M:%S", tz=Sys.timezone())
as.POSIXct(new_data$`Subscribe Date`, tz=Sys.timezone())
new_data
as.POSIXct(new_data$`Subscribe Date`, format = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
as.POSIXct(new_data$`Subscribe Date`, format = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
as.POSIXct(new_data$`Subscribe Date`)
new_data
previous_data
as.Date(previous_data$`Subscribe Date`)
as.POSIXct(new_data$`Subscribe Date`)
as.Date(as.POSIXct(new_data$`Subscribe Date`))
updated
previous_data <- read_csv("subscriber-list_16.csv")
new_data <- read_excel("KyleTier2_3subs.xlsx")
update_data <- function(old, new) {
old <- old %>%
clean_names() %>%
mutate(subscribe_date = as.Date(subscribe_date))
# added because of TZ formatting of last dataset
new <- new %>%
clean_names() %>%
mutate(subscribe_date = as.Date(as.POSIXct(subscribe_date)))
new$updated_sub_date <- new$subscribe_date
for (i in 1:nrow(new)) {
if (
nrow(merge(new[new$username == new$username[i] & new$current_tier == new$current_tier[i], ][, c('username', 'current_tier')], old[, c('username', 'current_tier')])) > 0 &&
(old[old$username == new$username[i] & old$current_tier == new[new$username == new$username[i], ]$current_tier, ]$sub_type != "gift") &&
(new$subscribe_date[i] != old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date)) {
new$updated_sub_date[i] <- old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date
}
}
new <- new %>%
arrange(updated_sub_date)
return(new)
}
updated <- update_data(previous_data, new_data)
updated
# check for lapsed subs that resubbed
updated %>%
filter(subscribe_date != updated_sub_date)
all(updated$subscribe_date == updated$updated_sub_date)
updated
# only t3s
t3 <- updated %>%
filter(current_tier == "Tier 3" &
!(username %in% c("kylephillipsfun",
"mrskphil01")) &
sub_type != "gift") %>%
select(username, updated_sub_date, current_tier) %>%
dplyr::rename(subscribe_date = updated_sub_date) %>%
arrange(subscribe_date)
write.csv(t3, "tier3_list_05-01-2022.csv")
t3
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv")
previous_datat2
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
rename(subscribe_date = subscribe_date_time)
library(tidyverse)
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
rename(subscribe_date = subscribe_date_time)
library(dplyr)
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
rename(subscribe_date = subscribe_date_time)
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time)
previous_datat3 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time)
previous_datat3
previous_data <- rbind(previous_datat2, previous_datat3)
new_data <- read_excel("KyleTier2_3subs.xlsx")
update_data <- function(old, new) {
old <- old %>%
clean_names() %>%
mutate(subscribe_date = as.Date(subscribe_date))
# added because of TZ formatting of last dataset
new <- new %>%
clean_names() %>%
mutate(subscribe_date = as.Date(as.POSIXct(subscribe_date)))
new$updated_sub_date <- new$subscribe_date
for (i in 1:nrow(new)) {
if (
nrow(merge(new[new$username == new$username[i] & new$current_tier == new$current_tier[i], ][, c('username', 'current_tier')], old[, c('username', 'current_tier')])) > 0 &&
(old[old$username == new$username[i] & old$current_tier == new[new$username == new$username[i], ]$current_tier, ]$sub_type != "gift") &&
(new$subscribe_date[i] != old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date)) {
new$updated_sub_date[i] <- old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date
}
}
new <- new %>%
arrange(updated_sub_date)
return(new)
}
updated <- update_data(previous_data, new_data)
previous_data
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time)
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") #%>%
previous_datat2
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time)
previous_datat3 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time)
previous_data <- rbind(previous_datat2, previous_datat3)
new_data <- read_excel("KyleTier2_3subs.xlsx")
new_data
update_data <- function(old, new) {
old <- old %>%
clean_names() %>%
mutate(subscribe_date = as.Date(subscribe_date))
# added because of TZ formatting of last dataset
new <- new %>%
clean_names() %>%
mutate(subscribe_date = as.Date(as.POSIXct(subscribe_date)))
new$updated_sub_date <- new$subscribe_date
new
for (i in 1:nrow(new)) {
if (
nrow(merge(new[new$username == new$username[i] & new$current_tier == new$current_tier[i], ][, c('username', 'current_tier')], old[, c('username', 'current_tier')])) > 0 &&
(old[old$username == new$username[i] & old$current_tier == new[new$username == new$username[i], ]$current_tier, ]$sub_type != "gift") &&
(new$subscribe_date[i] != old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date)) {
new$updated_sub_date[i] <- old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date
}
}
new <- new %>%
arrange(updated_sub_date)
return(new)
}
updated <- update_data(previous_data, new_data)
old <- rbind(previous_datat2, previous_datat3)
new <- read_excel("KyleTier2_3subs.xlsx")
old <- old %>%
clean_names() %>%
mutate(subscribe_date = as.Date(subscribe_date))
old
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time) %>%
mutate(sub_type = "recurring")
previous_datat3 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time) %>%
mutate(sub_type = "recurring")
old <- rbind(previous_datat2, previous_datat3)
new <- read_excel("KyleTier2_3subs.xlsx")
new <- new %>%
clean_names() %>%
mutate(subscribe_date = as.Date(as.POSIXct(subscribe_date)))
new
previous_datat2 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 2.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time) %>%
mutate(sub_type = "recurring")
previous_datat3 <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3.csv") %>%
dplyr::rename(subscribe_date = subscribe_date_time) %>%
mutate(sub_type = "recurring")
previous_data <- rbind(previous_datat2, previous_datat3)
new_data <- read_excel("KyleTier2_3subs.xlsx")
update_data <- function(old, new) {
old <- old %>%
clean_names() %>%
mutate(subscribe_date = as.Date(subscribe_date))
# added because of TZ formatting of last dataset
new <- new %>%
clean_names() %>%
mutate(subscribe_date = as.Date(as.POSIXct(subscribe_date)))
new$updated_sub_date <- new$subscribe_date
for (i in 1:nrow(new)) {
if (
nrow(merge(new[new$username == new$username[i] & new$current_tier == new$current_tier[i], ][, c('username', 'current_tier')], old[, c('username', 'current_tier')])) > 0 &&
(old[old$username == new$username[i] & old$current_tier == new[new$username == new$username[i], ]$current_tier, ]$sub_type != "gift") &&
(new$subscribe_date[i] != old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date)) {
new$updated_sub_date[i] <- old[old$username == new$username[i] & old$current_tier == new$current_tier[i], ]$subscribe_date
}
}
new <- new %>%
arrange(updated_sub_date)
return(new)
}
updated <- update_data(previous_data, new_data)
updated
# check for lapsed subs that resubbed
updated %>%
filter(subscribe_date != updated_sub_date)
all(updated$subscribe_date == updated$updated_sub_date)
# only t3s
t3 <- updated %>%
filter(current_tier == "Tier 3" &
!(username %in% c("kylephillipsfun",
"mrskphil01")) &
sub_type != "gift") %>%
select(username, updated_sub_date, current_tier) %>%
dplyr::rename(subscribe_date = updated_sub_date) %>%
arrange(subscribe_date)
write.csv(t3, "tier3_list_05-01-2022.csv")
t3
t2 <- updated %>%
filter(current_tier == "Tier 2" &
sub_type != "gift") %>%
select(username, updated_sub_date, current_tier) %>%
dplyr::rename(subscribe_date = updated_sub_date) %>%
arrange(subscribe_date)
# select(username, subscribe_date)
write.csv(t2, "tier2_list_04-09-2022.csv")
t2 <- updated %>%
filter(current_tier == "Tier 2" &
sub_type != "gift") %>%
select(username, updated_sub_date, current_tier) %>%
dplyr::rename(subscribe_date = updated_sub_date) %>%
arrange(subscribe_date)
# select(username, subscribe_date)
write.csv(t2, "tier2_list_05-01-2022.csv")
t3
onetime <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3 (1).csv")
onetime
onetime <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3 (1).csv") %>%
arrange(subscribe_date)
onetime
write.csv(onetime, "tier3_list_05-01-2022.csv")
onetime <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3 (1).csv") %>%
arrange(subscribe_date) %>%
select(username, updated_sub_date, current_tier)
onetime <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3 (1).csv") %>%
arrange(subscribe_date) %>%
dplyr::select(username, updated_sub_date, current_tier)
onetime <- read_csv("T2 & T3 Sub List (updated 04-09-2022) - Tier 3 (1).csv") %>%
arrange(subscribe_date) %>%
dplyr::select(username, subscribe_date, current_tier)
write.csv(onetime, "tier3_list_05-01-2022.csv")
